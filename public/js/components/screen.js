
class systemItem extends HTMLElement {
  constructor() {
    super();
    this.shadow = this.attachShadow({ mode: "open" });
    this._src = this.getAttribute("src");
    this._disable = this.getAttribute("disable") || false;
    this.render();
  }

  /**
   * The `connectedCallback` function in JavaScript calls the `render` method when an element is
   * connected to the DOM.
   */
  connectedCallback() {
    this.render();
  }

  /**
   * The `disconnectedCallback` function removes the element from the DOM when it is disconnected.
   */
  disconnectedCallback() {
    this.remove();
  }

  /**
   * This function returns the value of the `_disable` property.
   * @returns The `disable` property is being returned.
   */
  get disable() {
    return this._disable;
  }

  /**
   * The above function sets a property named "disable" to a new value.
   * @param newValue - The `newValue` parameter in the `set disable(newValue)` function is the value that
   * will be assigned to the `_disable` property of the object.
   */
  set disable(newValue) {
    this._disable = newValue;
  }

  /**
   * The `addValve` function appends the HTML content generated by the `Valvule` function to the `shadow`
   * element.
   * @param item - The `item` parameter in the `addValve` function represents the item that you want to
   * add to the `shadow` element.
   */
  addValve(item) {
    this.shadow.innerHTML += this.Valvule(item);
  }

  /**
   * The function `deleteValve` removes an element from the DOM based on its ID.
   * @param item - The `item` parameter in the `deleteValve` function is the ID of the element that you
   * want to delete from the DOM.
   */
  deleteValve(item) {
    let element = this.shadow.getElementById(item);
    if (element !== null) {
      element.remove();
    }
  }

  /**
   * The Valvule function generates a valvule-element HTML tag with specified attributes based on the
   * input item object.
   * @param item - The `item` parameter seems to represent an object with properties such as `id` and
   * `pos`. The `id` property is likely a unique identifier for the item, and the `pos` property seems to
   * be an object with `x` and `y` properties representing the position of the
   * @returns A string containing an HTML `<valvule-element>` with attributes `id`, `cx`, and `cy` based
   * on the properties of the `item` object.
   */
  Valvule(item) {
    return `<valvule-element 
              id="${item.id}" 
              cx="${item.pos.x}" 
              cy="${item.pos.y}">
            </valvule-element>`;
  }

  /**
   * The `render` function sets the inner HTML of an element to a combination of CSS and HTML templates.
   */
  render() {
    this.shadow.innerHTML = `${this.templateCSS()}${this.templateHTML()}`;
  }

  templateCSS() {
    return `<style>
        .system {
        position: absolute;
        width: 100%;
        height: auto;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        margin: auto;
        }
        </style>`;
  }

  templateHTML() {
    return `<img class="system" src="${this._src}">`;
  }
}

window.customElements.define("screen-element", systemItem);
